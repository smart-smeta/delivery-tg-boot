from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.states import OrderStates
from models.user import register_user, load_users
from models.order import add_order
from models.order import load_orders, save_orders

# /start
async def start_handler(message: types.Message):
    user = message.from_user
    is_new = register_user(user.id, user.full_name, user.username)
    if is_new:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! üöö")
    else:
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

# /profile
async def profile_handler(message: types.Message):
    users = load_users()
    user_id = str(message.from_user.id)
    if user_id in users:
        user_info = users[user_id]
        text = (
            f"üßë –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ò–º—è: {user_info.get('full_name','-')}\n"
            f"–õ–æ–≥–∏–Ω: @{user_info.get('username','-')}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_info.get('registered_at','-')}"
        )
    else:
        text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    await message.answer(text)

# /help
async def help_handler(message: types.Message):
    text = (
        "ü§ñ –Ø –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/profile ‚Äî –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/order ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
    )
    await message.answer(text)

# /users (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
ADMIN_IDS = [12345678]  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π user_id

async def users_handler(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    users = load_users()
    if not users:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for uid, info in users.items():
            text += f"{uid}: {info.get('full_name','-')} @{info.get('username','-')}\n"
        await message.answer(text)

# FSM: /order (—Å—Ç–∞—Ä—Ç)
async def order_start(message: types.Message, state: FSMContext):
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:")
    await state.set_state(OrderStates.waiting_for_description)

# FSM: –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def order_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderStates.waiting_for_address)

# FSM: –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
async def order_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
    await state.set_state(OrderStates.waiting_for_phone)

# FSM: —Ç–µ–ª–µ—Ñ–æ–Ω
async def order_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30 –∏–ª–∏ '–∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ')")
    await state.set_state(OrderStates.waiting_for_time)

# FSM: –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
async def order_time(message: types.Message, state: FSMContext):
    await state.update_data(delivery_time=message.text)
    data = await state.get_data()
    text = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n"
        f"üìù –ó–∞–∫–∞–∑: {data.get('description')}\n"
        f"üè† –ê–¥—Ä–µ—Å: {data.get('address')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
        f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {data.get('delivery_time')}\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–î–∞', –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç'."
    )
    await message.answer(text)
    await state.set_state(OrderStates.waiting_for_confirmation)

# FSM: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
async def order_confirmation(message: types.Message, state: FSMContext):
    if message.text.lower() in ("–¥–∞", "yes", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"):
        data = await state.get_data()
        order = {
            "user_id": message.from_user.id,
            "description": data.get("description"),
            "address": data.get("address"),
            "phone": data.get("phone"),
            "delivery_time": data.get("delivery_time"),
        }
        add_order(order)
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. üöö")
        await state.clear()
    else:
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /order.")
        await state.clear()
# –ö–æ–º–∞–Ω–¥–∞ /pay
async def pay_handler(message: types.Message):
    user_id = message.from_user.id
    orders = load_orders()
    unpaid_orders = [o for o in orders if o.get("user_id") == user_id and not o.get("paid")]
    if not unpaid_orders:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return
    last_order = unpaid_orders[-1]
    # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π, –ø–æ–∫–∞ ‚Äî —ç–º—É–ª—è—Ü–∏—è
    last_order["paid"] = True
    save_orders(orders)
    await message.answer(
        "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ.\n"
        "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –û–ü–õ–ê–ß–ï–ù–û ‚úÖ"
    )
